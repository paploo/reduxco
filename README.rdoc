= Overview

Reduxco is a general purpose graph reduction calculation engine for those
non-linear dependency flows that normal pipelines and Rack Middleware-like
architectures can't do cleanly.

Conceptually, it is similar to using Rack Middleware with named keys to store
intermediate calculations that have to be reused later, but unlike Rack Middleware,
Reduxco is self organizing based on the dependencies used by each piece.

It's primary public facing class is Reduxco::Context.

= Examples

== Basic Context Use

In practice, one can build one ore more tables of callable objects (e.g. Procs or
custom class instances), and register them with a Reduxco::Context.  Callables can then
used their Reduco::Context handle to refer to the callables they can depend on.

For example, the addition of two numbers could be done as follows:

  map = {
    sum: ->(c){ c[:x] + c[:y] },
      x: ->(c){ 3 },
      y: ->(c){ 5 }
  }

  sum = Reduxco::Reduxer.new(map).reduce(:sum)
  sum.should == 8

Note that the symbol <code>:app</code> is the default root node of Reduxco::Context#reduce,
so if <code>:sum</code> were renamed to <code>:app</code> above, the last line could
be slightly simplified as:

  sum = Reduxco::Context.new(map).reduce

Of course, any object responding to <code>call</code> can be used as the values in
the map, so one could just as easily define a class with an instance method of
<code>call</code> on it instead of using Proc objects.

== Overriding and Super

If multiple maps of callables are given, and the keys (referred to as names from
here on) are duplicated in the maps, the last map given wins, shadowing the previous map.
For example:

  map1 = {
    message: ->(c){ 'Hello From Map 1' }
  }

  map2 = {
    message: ->(c){ 'Hello From Map 2' }
  }

  msg = Reduxco::Reduxer.new(map1, map2).reduce(:message)
  msg.should == 'Hello From Map 2'

If one wishes to refer to previous (shadowed) callables, one can do that using
Context#super.  For example:

  map1 = {
    message: ->(c){ 'Hello From Map 1' }
  }

  map2 = {
    message: ->(c){ c.super + ' and Hello From Map 2' }
  }

  msg = Reduxco::Context.new(map1, map2).reduce(:message)
  msg.should == 'Hello From Map 1 and Hello From Map 2'

== Introspection

There are several introspection methods for making assertions about the
Reduxco::Context.  These are usually used by callables to inspect their
environment before proceeding.

[Reduxco::Context#include?] Allows you to inspect if the Reduxco::Context
                            can resolve a given refname if called.
[Reduxco::Context#completed?] Allows you to inspect if the callable associated
                              with a given block name has already been called;
                              useful for assertions about weak dependencies.
[Reduxco::Context#assert_completed] Like <code>computed?</code>, but it raises
                                    an exception if it fails.

== Before, After, and Inside

= Contact

Jeff Reinecke <jreinecke@whitepages.com>

= Roadmap

TBD

= History

[1.0.0 - 2013-Apr-18] Initial Release.

= License

  Copyright (c) 2013, WhitePages, Inc.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
      * Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.
      * Redistributions in binary form must reproduce the above copyright
        notice, this list of conditions and the following disclaimer in the
        documentation and/or other materials provided with the distribution.
      * Neither the name of the company nor the
        names of its contributors may be used to endorse or promote products
        derived from this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL WHITEPAGES, INC. BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
